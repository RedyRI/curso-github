git beginner comands: 
git config --list // to see the configuration
git config --list --show-origin // to see where the configuration is saved
git add -A // to add the changes to the staging area
git commit -m 'some message' // to commit a change
git rm --cached <filename> // to remove a file from the staging area 
git show // use this command to show the last changes in your proyect
git diff <commit id1> <commit id2> // to compare two versions of the project, in the id2 space put the last version you want conpare to
history // use this command to show all the commands that have been inserted into the bash
git reset <commit id> --hard/--soft // to getback to especific version of our code, be carefull with the flag, a soft reset takes us back to a especific version but keeps our staging area in its actuall state, while a hard reset makes everything go a way and also when we do git log all the commits made after the version of the project we are going baskto, are deleted as well, so be carefull with this command

git log --stat // allow us to see all the changes along the history of the project in a very light way
*Hint: the (head --> main) of our log history means that we are actually in the head(last) version of our project and we are actually in the main branch

git checkout <commit id> <filename> //let us see a certain file in a certain version of theproject, need to be carefull here because by doing this, our file with the same name of <filename> in our actual version gets overwritten, so to just see the change, use this command, but the do ** git checkout master <filename>, to go back to our actual version of our filename 

git remote add origin <the path to the remote repository> // use this command to add a remote origin to your project, this is the way to link your local repo that you have been working on, and upload it to a remote repo

git pull origin main // use this comand to get the latest version of a branch from github

git pull origin master --allow-unrelated-histories //use this flag to allow unrelated histories(a group of commits)

to work from different devices (pcs ow laptops) you have to add the necesary ssh keys to your repo, then clone, or add a remote origin pointing to the ssh repo url, then pull to be up to date, if there is unrelated histories, use the adecuated command to allow unrelated histories, then now you are able now to push changes to your repo

git log --all --graph --decorate --oneline // to see all the commits history in a compact mode

as a trick from the linux world we can set aliases to certain commands like for example we can set an alias for the last command as follows:

alias arbolito="git log --all --graph --decorate --oneline" // now wen we run arbolito on the bash, it runs all the command it alias belong to

to add tag in our project (we can use this tags to separate important changes to our code, that can work as versions of our projct), using the followig command
git tag -a ##a stands for add## v0.1 -m '<insert a menainfull message here>' <insert here a hash of the commit you want to add the tag to>

git tag // to show a list of the tags that we have created
git show-ref --tags // also shows a list of tags but addig more info this time, in this case also adds the hash related to the commit

git push origin --tags // use this command to push the tags that we saved to the remote repo

git tag -d <tag name> // by this you delete a tag in your local repo but if you have already pushed this tag to your repo, it won't be deleted from  the remote repo because it is taken as references for the project

git push origin :refs/tags/<tag name> // use this command to delete the tag in the remote repo
